#!/usr/bin/env python
import argparse
from pathlib import Path
import sys
import shutil

VERSION = "0.1"

def main():
    global options
    options = get_options()
    process_path(options.startdir)


def process_path(start_location):

    # We need to be *super* careful about this.  As of Oct 2023 the behaviour of
    # rglob is to *not* follow symlinked directories, which means that this code
    # can't escape out of the start_location root.  There is a bug request to 
    # change this behaviour though at https://github.com/python/cpython/issues/77609
    # which would add a "follow_symlinks" option to enable this behaviour.  You would
    # hope that if they implement this that it would default to False, but if it 
    # didn't then this code could escape into the main filesystem and cause havoc.

    for file in Path(start_location).rglob("*"):
        if not file.is_symlink():
            continue

        target = file.readlink()
        owner = file.owner()
        group = file.group()

        if options.dryrun:
            print(f"Found {str(file)} which pointed to {target}")

        else:
            # We must delete the original symlink first otherwise the
            # open statement will follow it.
            file.unlink()

            with open(file,"wt", encoding="utf8") as out:
                print("#symlink2text", file=out)
                print("#https://github.com/s-andrews/symlink2text", file=out)
                print(f"TARGET\t{target}", file=out)

            shutil.chown(file, user=owner, group=group)

            if not options.quiet:
                print(f"Replaced {file}", file=sys.stderr)


def get_options():
    parser = argparse.ArgumentParser(description="Convert symlinks to a text file saying where the symlink pointed")

    parser.add_argument("--quiet", action="store_true", default=False, help="Suppress all progress messages")
    parser.add_argument("--dryrun",action="store_true", default=False, help="Report on actions but don't do anything")
    parser.add_argument("--version", action="version", version=f"symlink2text v{VERSION} https://github.com/s-andrews/symlink2text")
    parser.add_argument("startdir", type=str, help="The location to search for symlinks")

    options = parser.parse_args()

    return options

if __name__ == "__main__":
    main()

